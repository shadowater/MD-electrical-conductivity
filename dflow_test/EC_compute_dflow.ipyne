{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "cf87629d",
   "metadata": {},
   "outputs": [],
   "source": [
    "from dflow import config, s3_config, Step,upload_artifact, Workflow, Step\n",
    "from dflow.plugins import bohrium\n",
    "from dflow.plugins.bohrium import TiefblueClient\n",
    "from dflow.python import OP, OPIO, Artifact, OPIOSign, PythonOPTemplate\n",
    "\n",
    "import os\n",
    "from pathlib import Path\n",
    "\n",
    "config[\"host\"] = \"https://workflows.deepmodeling.com\"\n",
    "config[\"k8s_api_server\"] = \"https://workflows.deepmodeling.com\"\n",
    "\n",
    "bohrium.config[\"username\"] = \"2930256664@qq.com\"\n",
    "bohrium.config[\"password\"] = \"Bohrium@cch7\"\n",
    "bohrium.config[\"project_id\"] = \"11702\"\n",
    "s3_config[\"repo_key\"] = \"oss-bohrium\"\n",
    "s3_config[\"storage_client\"] = TiefblueClient()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "54ec27a2",
   "metadata": {},
   "outputs": [],
   "source": [
    "class MSD(OP):\n",
    "    def __init__(self):\n",
    "        pass\n",
    "\n",
    "    @classmethod\n",
    "    def get_input_sign(cls):\n",
    "        return OPIOSign({\"tpr\": Artifact(Path),\"xtc\": Artifact(Path),\"atoms\":str,\"start\":int,\"stop\":int})\n",
    "    \n",
    "    @classmethod\n",
    "    def get_output_sign(cls):\n",
    "        return OPIOSign({\"MSD_npy\": Artifact(Path)})\n",
    "\n",
    "    @OP.exec_sign_check\n",
    "    def execute(self, op_in: OPIO) -> OPIO:\n",
    "\n",
    "        import MDAnalysis as mda\n",
    "        import MDAnalysis.analysis.msd as msd\n",
    "        import numpy as np\n",
    "        \n",
    "        u = mda.Universe(str(op_in[\"tpr\"]),str(op_in[\"xtc\"]))\n",
    "        atom_select = op_in[\"atoms\"]\n",
    "        MSD = msd.EinsteinMSD(u, select=atom_select, msd_type='xyz', fft=True)\n",
    "        MSD.run(start=op_in[\"start\"],stop=op_in[\"stop\"])\n",
    "        msd_result =  MSD.results.timeseries\n",
    "        np.save(\"MSD.npy\",msd_result)\n",
    "                        \n",
    "        op_out = OPIO({\n",
    "        \"MSD_npy\":  Path(\"MSD.npy\")})\n",
    "        return op_out\n",
    "\n",
    "class EC(OP):\n",
    "    def __init__(self):\n",
    "        pass\n",
    "\n",
    "    @classmethod\n",
    "    def get_input_sign(cls):\n",
    "        return OPIOSign({\"npy\": Artifact(Path),\"timestep\":float,\"temperature\":float,\"charge\":int})\n",
    "    \n",
    "    @classmethod\n",
    "    def get_output_sign(cls):\n",
    "        return OPIOSign({\"EC\":float})\n",
    "\n",
    "    @OP.exec_sign_check\n",
    "    def execute(self, op_in: OPIO) -> OPIO:\n",
    "\n",
    "        import numpy as np\n",
    "        from scipy.stats import linregress\n",
    "        \n",
    "        MSD = np.load(str(op_in[\"npy\"]))\n",
    "        temperature = op_in[\"temperature\"]\n",
    "        charge = op_in['charge']\n",
    "        \n",
    "        linear_model = linregress(np.arange(len(MSD))*op_in[\"timestep\"],MSD)\n",
    "        slope = linear_model.slope\n",
    "        error = linear_model.rvalue\n",
    "        \n",
    "        diffusion_coefficient = slope * 1/6\n",
    "        FF_RT = (9.6485*10**4)**2/8.314/temperature# F Fareday's constant R gas constant T absolute temperature\n",
    "\n",
    "        conductivity = (charge**2)*(diffusion_coefficient/100*10**(-9))*FF_RT*100\n",
    "                            \n",
    "        op_out = OPIO({\n",
    "        \"EC\":  float(conductivity)})\n",
    "        return op_out"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "d10e4c9d",
   "metadata": {},
   "outputs": [],
   "source": [
    "# brm_context = bohrium.BohriumExecutor(\n",
    "#     executor=\"bohrium_v2\",\n",
    "#     extra='{\"scass_type\":\"c8_m16_cpu\",\"projectId\": 11702,\"jobType\":\"container\", \"logFiles\": []}}'\n",
    "# )\n",
    "\n",
    "step1 = Step(\n",
    "    \"step1\",\n",
    "    PythonOPTemplate(MSD,image=\"registry.dp.tech/dptech/prod-14962/gromacs-dflow-mda:gromacs-dflow-mda\",command=[\"python3\"]),\n",
    "    parameters={\"atoms\": \"name CLA\",\"start\":0,\"stop\":100},\n",
    "    artifacts={\"tpr\": upload_artifact(['example.tpr']),\"xtc\": upload_artifact(['example.xtc'])},\n",
    "#     executor=lebesgue,\n",
    ")\n",
    "\n",
    "step2 = Step(\n",
    "    \"step2\",\n",
    "    PythonOPTemplate(EC,image=\"registry.dp.tech/dptech/prod-14962/gromacs-dflow-mda:gromacs-dflow-mda\",command=[\"python3\"]),\n",
    "    parameters={\"timestep\": 0.004,\"temperature\":300,\"charge\":1},\n",
    "    artifacts={\"npy\": step1.outputs.artifacts[\"MSD_npy\"]},\n",
    "#     executor=lebesgue,\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "950c8765",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Workflow has been submitted (ID: ec-9c2b8, UID: 0883bbba-055a-40b7-aa9d-8e8d3800fa5f)\n"
     ]
    }
   ],
   "source": [
    "wf = Workflow(name=\"ec\")\n",
    "wf.add(step1)\n",
    "wf.add(step2)\n",
    "wf.submit();"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "e8039132",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.9"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
